frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
gt=GenerateGeno(frq, ld, Nt)
yTr=rnorm(NTr)+g[,1]*0.5
yTr=scale(yTr)
yT=rnorm(Nt)+gt[,1]*0.5
yT=scale(yT)
comb=t(combn(loci, 2))
TRA=array(0, dim=nrow(comb))
StatTr=array(0, dim=nrow(comb))
BTR=array(0, dim=nrow(comb))
PTR=array(0, dim=nrow(comb))
StatT=array(0, dim=nrow(comb))
TA=array(0, dim=nrow(comb))
BT=array(0, dim=nrow(comb))
PT=array(0, dim=nrow(comb))
for(i in 1:nrow(comb))
{
gCode=MultiCode(g, comb[i,])
gCodeT=MultiCode(gt, comb[i,])
dat=GetScheme(gCode, yTr)
scheme=dat[[1]]
MG=dat[[2]]
print(scheme)
xTr=MDR(scheme, MG, gCode)
modTr=lm(yTr~xTr)
BTR[i]=modTr$coefficients[2]
StatTr[i] = summary(modTr)$fstatistic[1]
PTR[i]=summary(modTr)$coefficients[2,4]
TRA[i] = MDRScoreTrain(scheme, MG, gCode, yTr)
Loss=LossFun(gCode, gCodeT)
print(Loss)
xT=MDR(scheme, MG, gCodeT)
modT=lm(yT~xT)
BT[i]=modT$coefficients[2]
StatT[i] = summary(modT)$fstatistic[1]*Loss
PT[i]=summary(modT)$coefficients[2,4]
TA[i] = MDRScoreTest(scheme, MG, gCodeT, yT)
}
layout(matrix(1:4, 2, 2))
plot(BTR, TRA)
plot(BT, TA)
plot(TRA, -log10(PTR))
plot(TA, -log10(PT))
layout(matrix(1:4, 2, 2, byrow=T))
plot(BTR, TRA)
plot(BT, TA)
plot(TRA, -log10(PTR))
plot(TA, -log10(PT))
layout(matrix(1:6, 3, 2, byrow=F))
plot(BTR, TRA)
plot(BT, TA)
plot(TRA, -log10(PTR))
plot(TA, -log10(PT))
layout(matrix(1:6, 3, 2, byrow=F))
plot(BTR, TRA)
plot(BTR, -log10(PTR))
plot(TRA, -log10(PTR))
plot(BT, TA)
plot(BT, -log10(PT))
plot(TA, -log10(PT))
comb
source("~/R/MyLib/shotgun.R")
source("MDRFun.R")
loci=100
frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
gt=GenerateGeno(frq, ld, Nt)
yTr=rnorm(NTr)#+g[,1]*0.5
yTr=scale(yTr)
yT=rnorm(Nt)#+gt[,1]*0.5
yT=scale(yT)
comb=t(combn(loci, 2))
TRA=array(0, dim=nrow(comb))
StatTr=array(0, dim=nrow(comb))
BTR=array(0, dim=nrow(comb))
PTR=array(0, dim=nrow(comb))
StatT=array(0, dim=nrow(comb))
TA=array(0, dim=nrow(comb))
BT=array(0, dim=nrow(comb))
PT=array(0, dim=nrow(comb))
for(i in 1:nrow(comb))
{
gCode=MultiCode(g, comb[i,])
gCodeT=MultiCode(gt, comb[i,])
dat=GetScheme(gCode, yTr)
scheme=dat[[1]]
MG=dat[[2]]
print(scheme)
xTr=MDR(scheme, MG, gCode)
modTr=lm(yTr~xTr)
BTR[i]=modTr$coefficients[2]
StatTr[i] = summary(modTr)$fstatistic[1]
PTR[i]=summary(modTr)$coefficients[2,4]
TRA[i] = MDRScoreTrain(scheme, MG, gCode, yTr)
Loss=LossFun(gCode, gCodeT)
print(Loss)
xT=MDR(scheme, MG, gCodeT)
modT=lm(yT~xT)
BT[i]=modT$coefficients[2]
StatT[i] = summary(modT)$fstatistic[1]*Loss
PT[i]=summary(modT)$coefficients[2,4]
TA[i] = MDRScoreTest(scheme, MG, gCodeT, yT)
}
layout(matrix(1:6, 3, 2, byrow=F))
plot(BTR, TRA)
plot(BTR, -log10(PTR))
plot(TRA, -log10(PTR))
plot(BT, TA)
plot(BT, -log10(PT))
plot(TA, -log10(PT))
hist(PT)
hist(PT, breaks=20)
hist(PTR, breaks=20)
source("~/R/MyLib/shotgun.R")
source("MDRFun.R")
loci=500
frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
gt=GenerateGeno(frq, ld, Nt)
yTr=rnorm(NTr)#+g[,1]*0.5
yTr=scale(yTr)
yT=rnorm(Nt)#+gt[,1]*0.5
yT=scale(yT)
comb=t(combn(loci, 2))
TRA=array(0, dim=nrow(comb))
StatTr=array(0, dim=nrow(comb))
BTR=array(0, dim=nrow(comb))
PTR=array(0, dim=nrow(comb))
StatT=array(0, dim=nrow(comb))
TA=array(0, dim=nrow(comb))
BT=array(0, dim=nrow(comb))
PT=array(0, dim=nrow(comb))
for(i in 1:nrow(comb))
{
gCode=MultiCode(g, comb[i,])
gCodeT=MultiCode(gt, comb[i,])
dat=GetScheme(gCode, yTr)
scheme=dat[[1]]
MG=dat[[2]]
print(scheme)
xTr=MDR(scheme, MG, gCode)
modTr=lm(yTr~xTr)
BTR[i]=modTr$coefficients[2]
StatTr[i] = summary(modTr)$fstatistic[1]
PTR[i]=summary(modTr)$coefficients[2,4]
TRA[i] = MDRScoreTrain(scheme, MG, gCode, yTr)
Loss=LossFun(gCode, gCodeT)
print(Loss)
xT=MDR(scheme, MG, gCodeT)
modT=lm(yT~xT)
BT[i]=modT$coefficients[2]
StatT[i] = summary(modT)$fstatistic[1]*Loss
PT[i]=summary(modT)$coefficients[2,4]
TA[i] = MDRScoreTest(scheme, MG, gCodeT, yT)
}
i
nrow(comb)
source("~/R/MyLib/shotgun.R")
source("MDRFun.R")
loci=200
frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
gt=GenerateGeno(frq, ld, Nt)
yTr=rnorm(NTr)#+g[,1]*0.5
yTr=scale(yTr)
yT=rnorm(Nt)#+gt[,1]*0.5
yT=scale(yT)
comb=t(combn(loci, 2))
head(StatT)
modT
summary(modT)
summary(modT)$cefficients
summary(modT)$coefficients
summary(modT)$coefficient
names(modT)
modT$coefficients
modT$residuals
names(modT)
modT$qr
names(modT)
modT$model
names(summary(modelT))
names(summary(modT))
summary(modT)$r.sqared
summary(modT)$r.squared
source("~/R/MyLib/shotgun.R")
source("MDRFun.R")
loci=100
frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
source("~/R/MyLib/shotgun.R")
source("MDRFun.R")
loci=100
frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
gt=GenerateGeno(frq, ld, Nt)
yTr=rnorm(NTr)#+g[,1]*0.5
yTr=scale(yTr)
yT=rnorm(Nt)#+gt[,1]*0.5
yT=scale(yT)
comb=t(combn(loci, 2))
TRA=array(0, dim=nrow(comb))
StatTr=array(0, dim=nrow(comb))
BTR=array(0, dim=nrow(comb))
PTR=array(0, dim=nrow(comb))
RsqTR=array(0, dim=nrow(comb))
StatT=array(0, dim=nrow(comb))
TA=array(0, dim=nrow(comb))
BT=array(0, dim=nrow(comb))
PT=array(0, dim=nrow(comb))
RsqT=array(0, dim=nrow(comb))
for(i in 1:nrow(comb))
{
print(comb[i,])
gCode=MultiCode(g, comb[i,])
gCodeT=MultiCode(gt, comb[i,])
dat=GetScheme(gCode, yTr)
scheme=dat[[1]]
MG=dat[[2]]
print(scheme)
xTr=MDR(scheme, MG, gCode)
modTr=lm(yTr~xTr)
BTR[i]=modTr$coefficients[2]
StatTr[i] = summary(modTr)$fstatistic[1]
PTR[i]=summary(modTr)$coefficients[2,4]
TRA[i] = MDRScoreTrain(scheme, MG, gCode, yTr)
RsqTR[i]=summary(modTr)$r.squared
Loss=LossFun(gCode, gCodeT)
print(Loss)
xT=MDR(scheme, MG, gCodeT)
modT=lm(yT~xT)
BT[i]=modT$coefficients[2]
StatT[i] = summary(modT)$fstatistic[1]
PT[i]=summary(modT)$coefficients[2,4]
TA[i] = MDRScoreTest(scheme, MG, gCodeT, yT)
RsqT[i] = summary(modT)$r.squared
}
layout(matrix(1:6, 3, 2, byrow=F))
plot(BTR, TRA)
plot(BTR, -log10(PTR))
plot(TRA, -log10(PTR))
plot(BT, TA)
plot(BT, -log10(PT))
plot(TA, -log10(PT))
density(PRT)
density(PTR)
plot(density(PTR))
plot(density(PT))
hist(PRT)
hist(PTR)
hist(PT, add=T, col="red")
hist(PTR, add=T, col="red")
hist(PTR, add=T, col="blue")
plot(density(PTR), add=T)
lines(density(PTR), add=T)
lines(c(density(PTR), density(PT)))
lines( density(PT))
plot(density(PTR), add=T)
warnings()
plot(density(PTR))
hist(densty(PTR))
hist(PTR)
hist(PT)
hist(PT, breaks=25)
hist(PTR, breaks=25)
source("~/R/MyLib/shotgun.R")
source("MDRFun.R")
loci=200
frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
gt=GenerateGeno(frq, ld, Nt)
yTr=rnorm(NTr)#+g[,1]*0.5
yTr=scale(yTr)
yT=rnorm(Nt)#+gt[,1]*0.5
yT=scale(yT)
comb=t(combn(loci, 2))
TRA=array(0, dim=nrow(comb))
StatTr=array(0, dim=nrow(comb))
BTR=array(0, dim=nrow(comb))
PTR=array(0, dim=nrow(comb))
RsqTR=array(0, dim=nrow(comb))
StatT=array(0, dim=nrow(comb))
TA=array(0, dim=nrow(comb))
BT=array(0, dim=nrow(comb))
PT=array(0, dim=nrow(comb))
RsqT=array(0, dim=nrow(comb))
for(i in 1:nrow(comb))
{
print(comb[i,])
gCode=MultiCode(g, comb[i,])
gCodeT=MultiCode(gt, comb[i,])
dat=GetScheme(gCode, yTr)
scheme=dat[[1]]
MG=dat[[2]]
print(scheme)
xTr=MDR(scheme, MG, gCode)
modTr=lm(yTr~xTr)
BTR[i]=modTr$coefficients[2]
StatTr[i] = summary(modTr)$fstatistic[1]
PTR[i]=summary(modTr)$coefficients[2,4]
TRA[i] = MDRScoreTrain(scheme, MG, gCode, yTr)
RsqTR[i]=summary(modTr)$r.squared
Loss=LossFun(gCode, gCodeT)
print(Loss)
xT=MDR(scheme, MG, gCodeT)
modT=lm(yT~xT)
BT[i]=modT$coefficients[2]
StatT[i] = summary(modT)$fstatistic[1]
PT[i]=summary(modT)$coefficients[2,4]
TA[i] = MDRScoreTest(scheme, MG, gCodeT, yT)
RsqT[i] = summary(modT)$r.squared
}
layout(matrix(1:6, 3, 2, byrow=F))
plot(BTR, TRA)
plot(BTR, -log10(PTR))
plot(TRA, -log10(PTR))
plot(BT, TA)
plot(BT, -log10(PT))
plot(TA, -log10(PT))
plot(density(PTR))
hist(PTR, breaks=25)
hist(PT, breaks=25)
layout(matrix(1:2, 1, 2))
hist(PTR, breaks=25)
hist(PT, breaks=25)
layout(matrix(1:2, 1, 2))
hist(PTR, breaks=25, xlab="p-values", main="Distribtuion of the p-value for the training set")
hist(PT, breaks=25, ylab="p-values", main="Distribution of the p-value for the test set")
layout(matrix(1:2, 1, 2))
hist(PTR, breaks=25, xlab="p-values", main="Distribtuion of the p-value \nfor the training set")
hist(PT, breaks=25, ylab="p-values", main="Distribution of the p-value \nfor the test set")
layout(matrix(1:2, 1, 2))
hist(PTR, breaks=25, xlab="p-values", main="Distribtuion of the p-value \nfor the training set")
hist(PT, breaks=25, xlab="p-values", main="Distribution of the p-value \nfor the test set")
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTr)
plot(TA, RsqT)
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR)
plot(TA, RsqT)
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}))
plot(TA, RsqT, xlab="Test accuracy", ylab=expresion(R^{2}))
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}))
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05))
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
plot(TRA, TR)
layout(matrix(1:3, 1, 3))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
plot(TRA, TA)
layout(matrix(1:3, 1, 3))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
plot(RsqTR, RsqT)
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(TA > 0.5, "red", "blue"))
nrow(comb)
pCut=0.05/nrow(comb)
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse( PTR < pCut, "red", "blue"))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(PT < pCut, "red", "blue"))
pCut=0.05/nrow(comb)
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse( PTR < pCut, "red", "blue"))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(PT < pCut, "red", "blue"))
layout(matrix(1:2, 1, 2))
plot(TRA, BTR)
plot(TA, BT)
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta))
plot(TA, BT)
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta))
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta))
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PTR < pCut, "red", "blue"))
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PTR < pCut, "red", "blue"))
pCut=0.05/nrow(comb)
layout(matrix(1:2, 1, 2))
plot(TRA, RsqTR, xlab="Training accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse( PTR < pCut, "red", "blue"))
plot(TA, RsqT, xlab="Test accuracy", ylab=expression(R^{2}), xlim=c(0.35, 0.65), ylim=c(0, 0.05), col=ifelse(PT < pCut, "red", "blue"))
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PTR < pCut, "red", "blue"))
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PT < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PTR < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PT < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PTR < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(a=0, b=1, col="gray", lty=2)
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PT < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(a=0, b=1, col="gray", lty=2)
help(abline)
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PTR < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(v=0.5, col="gray", lty=2)
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PT < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(v=0.5, col="gray", lty=2)
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( TA < 0.5, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(v=0.5, col="gray", lty=2)
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( PT < pCut, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(v=0.5, col="gray", lty=2)
layout(matrix(1:2, 1, 2))
plot(TRA, BTR, xlab="Training accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( TA < 0.5, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(v=0.5, col="gray", lty=2)
plot(TA, BT, xlab="Testing accuracy", ylab=expression(beta), xlim=c(0.35, 0.65), ylim=c(-0.6, 0.6), col=ifelse( TA < 0.5, "red", "blue"))
abline(a=0, b=0, col="gray", lty=2)
abline(v=0.5, col="gray", lty=2)
idx=which(PT < pCut)
points(TA[idx], BT[idx], pch=15, col="red")
nrow(comb)
0.05/19900
log10(0.05/19900)
-log10(0.05/19900)
loci=100
Mlocus=3
comb=t(combn(loci, Mlocus))
source("~/R/MyLib/shotgun.R")
source("MDRFun.R")
loci=100
Mlocus=3
frq=runif(loci, min=0.05, max=0.5)
ld=array(0, dim=length(frq))
NTr=1000
Nt=500
g=GenerateGeno(frq, ld, NTr)
gt=GenerateGeno(frq, ld, Nt)
yTr=rnorm(NTr)#+g[,1]*0.5
yTr=scale(yTr)
yT=rnorm(Nt)#+gt[,1]*0.5
yT=scale(yT)
comb=t(combn(loci, Mlocus))
TRA=array(0, dim=nrow(comb))
StatTr=array(0, dim=nrow(comb))
BTR=array(0, dim=nrow(comb))
PTR=array(0, dim=nrow(comb))
RsqTR=array(0, dim=nrow(comb))
StatT=array(0, dim=nrow(comb))
TA=array(0, dim=nrow(comb))
BT=array(0, dim=nrow(comb))
PT=array(0, dim=nrow(comb))
RsqT=array(0, dim=nrow(comb))
for(i in 1:nrow(comb))
{
print(comb[i,])
gCode=MultiCode(g, comb[i,])
gCodeT=MultiCode(gt, comb[i,])
dat=GetScheme(gCode, yTr)
scheme=dat[[1]]
MG=dat[[2]]
print(scheme)
xTr=MDR(scheme, MG, gCode)
modTr=lm(yTr~xTr)
BTR[i]=modTr$coefficients[2]
StatTr[i] = summary(modTr)$fstatistic[1]
PTR[i]=summary(modTr)$coefficients[2,4]
TRA[i] = MDRScoreTrain(scheme, MG, gCode, yTr)
RsqTR[i]=summary(modTr)$r.squared
Loss=LossFun(gCode, gCodeT)
print(Loss)
xT=MDR(scheme, MG, gCodeT)
modT=lm(yT~xT)
BT[i]=modT$coefficients[2]
StatT[i] = summary(modT)$fstatistic[1]
PT[i]=summary(modT)$coefficients[2,4]
TA[i] = MDRScoreTest(scheme, MG, gCodeT, yT)
RsqT[i] = summary(modT)$r.squared
}
