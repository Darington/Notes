n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
hist(Type)
hist(Type)
hist(Type)
hist(Type)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
hist(Type)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
x1=X[X[,2]==i, ]
x1
range(x1)
range(x1[,1])
length(which(x1[,1]>5))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[1,] > 0))
mat[i,1] = nrow(x1)-length(idx)
mat[i,2] = length(idx)
}
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[1,] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
mat
x1
c1
which(x1[1,]>0)
x1
which(x1[1,]>0)
head(x1)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
mat
barplot(x1)
barplot(t(x1))
barplot(t(mat))
layout(matrix(1:2, 2, 1))
barplot(t(mat))
barplot(s)
layout(matrix(1:2, 2, 1))
barplot(t(-1mat))
barplot(s)
layout(matrix(1:2, 2, 1))
barplot(s)
barplot(t(-1*mat))
layout(matrix(1:2, 2, 1))
barplot(varContri)
barplot(t(-1*mat))
barplot(t(-1*mat), border = F)
layout(matrix(1:2, 2, 1))
barplot(varContri)
barplot(t(-1*mat), border = F)
par(mai=c(0, 0.5, 0.5, 0))
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri)
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri, border = F)
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri, border = F)
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri, border = F, ylab="% variation")
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 1, 0.5, 0))
barplot(varContri, border = F, ylab="% variation")
par(mai=c(0.5, 1, 0, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0.2, 1, 0.5, 0))
barplot(varContri, border = F, ylab="% variation")
par(mai=c(0.5, 1, 0.2, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
install.packages("Rtools")
install.packages("Rtools")
install.packages("~/manuscript/EigenGWAS/EigenGWAS_Package/EigenGWASFriends_0.1.0.tar.gz", type-"source", repos=NULL)
install.packages("~/manuscript/EigenGWAS/EigenGWAS_Package/EigenGWASFriends_0.1.0.tar.gz", type="source", repos=NULL)
library(EigenGWASFriends)
data(tt)
tt
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
library(EigenGWASFriends)
help("read.table")
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
library(EigenGWASFriends)
detach("package:EigenGWASFriends", unload=TRUE)
library("EigenGWASFriends", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("~/git/proQC_0.1.0.tar.gz", repos = NULL, type = "source")
qchisq(1.6e-148,1)
qchisq(1.6e-148,1, lower.tail = F)
qchisq(1.65e-149,1, lower.tail = F)
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
library("OATH", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:OATH", unload=TRUE)
detach("package:methods", unload=TRUE)
library("EigenGWASFriends", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
qchisq(1.65e-149, 1, lower.tail = F)
pnorm(40)
pnorm(20)
pnorm(10)
pnorm(5)
pnorm(3)
pnorm(2)
pnorm(2.1)
pnorm(5)
pnorm(8)
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
library(EigenGWASFriends)
help(aim)
setwd("~/git/Notes/StG/Day1Morning")
##########################
#D1-1
# sample size
##########################
N=1000
M=20000
#uniform
freq=runif(M)
#0.5
freq=rep(0.5, M)
#
gmat=matrix(0, N, M)
for(i in 1:M)
{
gmat[,i] = rbinom(N, 2, freq[i])
}
layout(matrix(1:4, 2, 2))
freqDat=colMeans(gmat)/2
plot(freqDat, frame.plot = F, xlab="Locus", ylab="Freq", pch=16)
qqplot(freqDat, rnorm(M, freq, sqrt(freq*(1-freq)/(2*N))), xlab = "Observed", ylab="Expected", frame.plot=F, pch=16)
abline(a=0, b=1, col="red")
pvN=pnorm((freqDat-0.5)/sqrt(freqDat*(1-freqDat)/(2*N)))
pvB=pbinom(apply(gmat, 2, sum), 2*N, 0.5)
hist(pvN)
hist(pvB)
##########################
#D1-1
# sample size
##########################
N=1000
M=20000
#uniform
freq=runif(M)
#0.5
freq=rep(0.5, M)
#
gmat=matrix(0, N, M)
for(i in 1:M)
{
gmat[,i] = rbinom(N, 2, freq[i])
}
layout(matrix(1:4, 2, 2))
freqDat=colMeans(gmat)/2
plot(freqDat, frame.plot = F, xlab="Locus", ylab="Freq", pch=16)
qqplot(freqDat, rnorm(M, freq, sqrt(freq*(1-freq)/(2*N))), xlab = "Observed", ylab="Expected", frame.plot=F, pch=16)
abline(a=0, b=1, col="red")
pvN=pnorm((freqDat-0.5)/sqrt(freqDat*(1-freqDat)/(2*N)))
pvB=pbinom(apply(gmat, 2, sum), 2*N, 0.5)
hist(pvN, main="Normal distribution")
hist(pvB, main="Binomial distribution")
freqDat
table(gmat[,1])
gcount=table(gmat[,1])
gcount
gcount[1]
hdtest=matrix(0, M, 2)
for(i in 1:M)
{
gcount=table(gmat[,i])
hdtest[i,1] = (gcount[1] - N/4)^2/(N/4) + (gcount[2] - N/2)^2/(N/2) + (gcount[3] - N/4)^2/(N/4)
}
head(hdtest)
pchisq(hdtest[,1], 2, lower.tail = F)
hdtest[,2]=pchisq(hdtest[,1], 2, lower.tail = F)
hist(hdtest[,2])
layout(matrix(1:2, 1, 2))
hist(sort(hdtest[,1]))
density(hdtest[,1])
plot(density(hdtest[,1]))
layout(matrix(1:2, 1, 2))
plot(density(hdtest[,1]))
hist(hdtest[,2])
layout(matrix(1:2, 1, 2))
plot(density(hdtest[,1]), main="density of chisq[2df]")
hist(hdtest[,2], main="p-value")
plot(density(hdtest[,1]), main="density of chisq[2df]")
hist(hdtest[,2], main="Hardy p-value")
