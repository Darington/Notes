print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
hist(Type)
hist(Type)
hist(Type)
hist(Type)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
hist(Type)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
x1=X[X[,2]==i, ]
x1
range(x1)
range(x1[,1])
length(which(x1[,1]>5))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[1,] > 0))
mat[i,1] = nrow(x1)-length(idx)
mat[i,2] = length(idx)
}
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[1,] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
mat
x1
c1
which(x1[1,]>0)
x1
which(x1[1,]>0)
head(x1)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
mat
barplot(x1)
barplot(t(x1))
barplot(t(mat))
layout(matrix(1:2, 2, 1))
barplot(t(mat))
barplot(s)
layout(matrix(1:2, 2, 1))
barplot(t(-1mat))
barplot(s)
layout(matrix(1:2, 2, 1))
barplot(s)
barplot(t(-1*mat))
layout(matrix(1:2, 2, 1))
barplot(varContri)
barplot(t(-1*mat))
barplot(t(-1*mat), border = F)
layout(matrix(1:2, 2, 1))
barplot(varContri)
barplot(t(-1*mat), border = F)
par(mai=c(0, 0.5, 0.5, 0))
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri)
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri, border = F)
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F)
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri, border = F)
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 0.5, 0.5, 0))
barplot(varContri, border = F, ylab="% variation")
par(mai=c(0.5, 0.5, 0, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0, 1, 0.5, 0))
barplot(varContri, border = F, ylab="% variation")
par(mai=c(0.5, 1, 0, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
n=1000
EV=scale(rnorm(n))
Type=floor(runif(n, 1, 8)+0.5)
X=matrix(c(scale(EV), Type), n, 2)
s=array(0, dim=length(table(Type)))
for(i in 1:length(s))
{
s[i]=sum(X[X[,2]==i, 1]^2)
}
varContri=s/sum(s)
print(varContri)
mat=matrix(0, nrow=length(s), ncol=2)
for(i in 1:length(s))
{
x1=X[X[,2]==i, ]
c1=length(which(x1[,1] > 0))
mat[i,1] = nrow(x1)-c1
mat[i,2] = c1
}
layout(matrix(1:2, 2, 1))
par(mai=c(0.2, 1, 0.5, 0))
barplot(varContri, border = F, ylab="% variation")
par(mai=c(0.5, 1, 0.2, 0))
barplot(t(-1*mat), border = F, col=c("yellow", "blue"))
install.packages("Rtools")
install.packages("Rtools")
install.packages("~/manuscript/EigenGWAS/EigenGWAS_Package/EigenGWASFriends_0.1.0.tar.gz", type-"source", repos=NULL)
install.packages("~/manuscript/EigenGWAS/EigenGWAS_Package/EigenGWASFriends_0.1.0.tar.gz", type="source", repos=NULL)
library(EigenGWASFriends)
data(tt)
tt
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
library(EigenGWASFriends)
help("read.table")
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/git/EigenGWASFriends_0.1.0.tar.gz", repos = NULL, type = "source")
library(EigenGWASFriends)
detach("package:EigenGWASFriends", unload=TRUE)
library("EigenGWASFriends", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("~/git/proQC_0.1.0.tar.gz", repos = NULL, type = "source")
plot(FinaFreq, col="grey", bty="l")
FinaFreq=colMeans(FinaC, na.rm = T)/2
setwd("~/git/Notes/StG/Day1Morming")
layout(matrix(1:6, 2, 3))
FinaC=read.table("../Data/Fina_Genotype.ped", as.is = T, na.strings = "99")[,-c(1:6)]
GCnt=array(0, ncol(FinaC))
for(i in 1:ncol(FinaC))
{
GCnt[i] = length(which(!is.na(FinaC[,i])))
}
FinaSC = matrix(NA, nrow = nrow(FinaC), ncol = ncol(FinaC))
for(i in 1:ncol(FinaC))
{
idx=which(!is.na(FinaC[,i]))
FinaSC[idx,i]=rbinom(length(idx), 1, 0.5)*2
}
FinaFreq=colMeans(FinaC, na.rm = T)/2
FinaSCFreq=colMeans(FinaSC, na.rm = T)/2
plot(FinaFreq, col="grey", bty="l")
qqplot(FinaFreq, FinaSCFreq, xlab = "Observed freq", ylab="Expected freq", frame.plot=F)
abline(a=0, b=1, col="red")
tTest=matrix(0, ncol(FinaC), 2)
tTest[,1]=(FinaFreq-0.5)/sqrt(FinaFreq*(1-FinaFreq)/(GCnt))
tTest[,2]=2*pt(-1*abs(tTest[,1]), GCnt-1)
hist(tTest[,2], breaks = 50, main="t test")
chiTest=matrix(0, ncol(FinaC), 2)
for(i in 1:ncol(FinaC))
{
gcnt=table(FinaC[,i])
gm=mean(gcnt)
chiTest[i,1] = (gcnt[1]-gm)^2/gm + (gcnt[2]-gm)^2/gm
chiTest[i,2] = pchisq(chiTest[i,1], 1, lower.tail = F)
}
hist(chiTest[,2], breaks = 50, main="Chisq test")
plot(FinaFreq, col=ifelse(chiTest[,2] < (0.05/length(FinaFreq)), "red", "grey"))
plot(FinaFreq, col=ifelse(chiTest[,2] < (0.05/length(FinaFreq)), "red", "grey"), pch=16)
FinaFreq=colMeans(FinaC, na.rm = T)/2
FinaSCFreq=colMeans(FinaSC, na.rm = T)/2
plot(FinaFreq, col="grey", bty="l")
qqplot(FinaFreq, FinaSCFreq, xlab = "Observed freq", ylab="Expected freq", bty="l")
abline(a=0, b=1, col="red")
tTest=matrix(0, ncol(FinaC), 2)
tTest[,1]=(FinaFreq-0.5)/sqrt(FinaFreq*(1-FinaFreq)/(GCnt))
tTest[,2]=2*pt(-1*abs(tTest[,1]), GCnt-1)
hist(tTest[,2], breaks = 50, main="t test")
chiTest=matrix(0, ncol(FinaC), 2)
for(i in 1:ncol(FinaC))
{
gcnt=table(FinaC[,i])
gm=mean(gcnt)
chiTest[i,1] = (gcnt[1]-gm)^2/gm + (gcnt[2]-gm)^2/gm
chiTest[i,2] = pchisq(chiTest[i,1], 1, lower.tail = F)
}
hist(chiTest[,2], breaks = 50, main="Chisq test")
plot(FinaFreq, col=ifelse(chiTest[,2] < (0.05/length(FinaFreq)), "red", "grey"), pch=16, bty="l")
layout(matrix(1:4, 2, 2))
N=c(500, 500, 500)
tS=rt(N[1], df=2)
chiS=rchisq(N[2], df=2)
normS=rnorm(N[3], mean=20)
hist(tS, xlim=c(-10, 30), main="3 distribution")
hist(chiS, add=T, col="red")
hist(normS, add=T, col="blue")
hist(c(pt(tS, df = 2), pchisq(chiS, df=2), pnorm(normS, mean=20)), main="p-value", xlab="P-value")
##########################
#D1-1
# sample size
##########################
N=1000
M=20000
#uniform
freq=runif(M)
#0.5
freq=rep(0.5, M)
#
gmat=matrix(0, N, M)
for(i in 1:M)
{
gmat[,i] = rbinom(N, 2, freq[i])
}
layout(matrix(1:4, 2, 2))
freqDat=colMeans(gmat)/2
plot(freqDat, frame.plot = F, xlab="Locus", ylab="Freq", pch=16)
qqplot(freqDat, rnorm(M, freq, sqrt(freq*(1-freq)/(2*N))), xlab = "Observed", ylab="Expected", frame.plot=F, pch=16)
abline(a=0, b=1, col="red")
pvN=pnorm((freqDat-0.5)/sqrt(freqDat*(1-freqDat)/(2*N)))
pvB=pbinom(apply(gmat, 2, sum), 2*N, 0.5)
hist(pvN)
hist(pvB)
layout(matrix(1:4, 2, 2))
N=c(500, 500, 500)
tS=rt(N[1], df=2)
chiS=rchisq(N[2], df=2)
normS=rnorm(N[3], mean=20)
hist(tS, xlim=c(-10, 30), main="3 distribution")
hist(chiS, add=T, col="red")
hist(normS, add=T, col="blue")
hist(c(pt(tS, df = 2), pchisq(chiS, df=2), pnorm(normS, mean=20)), main="p-value", xlab="P-value")
